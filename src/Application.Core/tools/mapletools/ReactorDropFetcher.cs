namespace tools.mapletools;
















/**
 * @author RonanLana
 * <p>
 * This application reports in reactor ids that have drops on the SQL table but are
 * not yet coded.
 */
public class ReactorDropFetcher {
    private static Path OUTPUT_FILE = ToolConstants.getOutputFile("reactor_drop_report.txt");
    private static string REACTOR_SCRIPT_PATH = ToolConstants.SCRIPTS_PATH + "/reactor";
    private static Connection con = SimpleDatabaseConnection.getConnection();

    private static PrintWriter printWriter = null;
    private static HashSet<int> reactors = new ();

    private static void printReportFileHeader() {
        printWriter.println(" # Report File autogenerated from the MapleReactorDropFetcher feature by Ronan Lana.");
        printWriter.println(" # Generated data takes into account several data info from the underlying DB and the server-side files.");
        printWriter.println();
    }

    private static int getReactorIdFromFilename(string name) {
        try {
            return int.Parse(name.Substring(0, name.indexOf('.')));
        } catch (Exception e) {
            return -1;
        }
    }

    private static void removeScriptedReactorids(string directoryName) {
        try (DirectoryStream<Path> stream = Files.newDirectoryStream(Path.of(directoryName))) {
            foreach(Path path in stream) {
                if (Files.isRegularFile(path)) {
                    reactors.Remove(getReactorIdFromFilename(path.getFileName().ToString()));
                }
            }
        } catch (IOException e) {
            Log.Logger.Error(e.ToString());
        }
    }

    private static void loadReactoridsOnDB() {
        PreparedStatement ps = con.prepareStatement("SELECT DISTINCT reactorid FROM reactordrops;");
        ResultSet rs = ps.executeQuery();

        while (rs.next()) {
            reactors.Add(rs.getInt("reactorid"));
        }

        rs.close();
        ps.close();
    }

    private static List<int> getSortedReactorids() {
        List<int> sortedReactors = new (reactors);
        Collections.sort(sortedReactors);

        return sortedReactors;
    }

    private static void fetchMissingReactorDrops() {
        loadReactoridsOnDB();
        removeScriptedReactorids(REACTOR_SCRIPT_PATH);
    }

    private static void reportMissingReactorDrops() {
        if (reactors.Count > 0) {
            printWriter.println("MISSING REACTOR DROP SCRIPTS");
            foreach(int reactorid in getSortedReactorids()) {
                printWriter.println("  " + reactorid);
            }
            printWriter.println("\n");
        }
    }

    private static void reportMissingReactors() {
        try (con; PrintWriter pw = new PrintWriter(Files.newOutputStream(OUTPUT_FILE))) {
            Console.WriteLine("Fetching reactors from DB...");
            fetchMissingReactorDrops();

            printWriter = pw;

            // report suspects of missing quest drop data, as well as those drop data that
            // may have incorrect questids.
            Console.WriteLine("Reporting results...");
            printReportFileHeader();
            reportMissingReactorDrops();

            Console.WriteLine("Done!");
        } catch (SQLException e) {
            Console.WriteLine("Warning: Could not establish connection to database to report quest data.");
            Console.WriteLine(e.getMessage());
        } catch (Exception e) {
            Log.Logger.Error(e.ToString());
        }
    }

    public static void main(string[] args) {
        reportMissingReactors();
    }
}
