/*
    This file is part of the HeavenMS MapleStory Server
    Copyleft (L) 2016 - 2019 RonanLana

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation version 3 as published by
    the Free Software Foundation. You may not use, modify or distribute
    this program under any other version of the GNU Affero General Public
    License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


using server.life;
using tools;

namespace tools.mapletools;














/**
 * @author RonanLana
 * <p>
 * This application traces arrow drop data on the underlying DB (that must be
 * defined on the DatabaseConnection file of this project) and generates a SQL file
 * that proposes updated arrow quantitty on drop entries for the drop_data table.
 * <p>
 * The arrow quantity range is calculated accordingly with the target mob stats, such
 * as level and if it's a boss or not.
 */

public class ArrowFetcher {
    private static string OUTPUT_FILE_NAME = "arrow_drop_data.sql";
    private static int MIN_ARROW_ID = 2060000;
    private static int MAX_ARROW_ID = 2061004;
    private static float CORRECTION_FACTOR = 2.2f;

    private static Dictionary<int, Pair<int, int>> mobRange = new ();
    private static PrintWriter printWriter;
    private static Dictionary<int, MonsterStats> mobStats;

    private static Pair<int, int> calcArrowRange(int level, bool boss) {
        int minRange, maxRange;

        // MIN range
        minRange = (int) Math.Ceiling(((2.870503597 * level) - 1.870503597) * (boss ? 1.4 : 1.0) / CORRECTION_FACTOR);

        // MAX range
        maxRange = (int) Math.Ceiling(1.25 * minRange);

        return new (minRange, maxRange);
    }

    private static void calcAllMobsArrowRange() {
        System.out.print("Calculating range... ");

        foreach(Entry<int, MonsterStats> mobStat in mobStats) {
            MonsterStats mms = mobStat.getValue();
            Pair<int, int> arrowRange;

            arrowRange = calcArrowRange(mms.getLevel(), mms.isBoss());
            mobRange.Add(mobStat.Key, arrowRange);
        }

        Console.WriteLine("done!");
    }

    private static void printSqlHeader() {
        printWriter.println(" # SQL File autogenerated from the MapleArrowFetcher feature by Ronan Lana.");
        printWriter.println(" # Generated data takes into account mob stats such as level and boss for the raw arrow ranges.");
        printWriter.println(" # Only current arrows entries on the DB it was compiled are being updated here.");
        printWriter.println();

        printWriter.println("UPDATE drop_data");
        printWriter.println("SET minimum_quantity = CASE");
    }

    private static void printSqlMiddle() {
        printWriter.println("  ELSE minimum_quantity END,");
        printWriter.println("    maximum_quantity = CASE");
    }

    private static void printSqlFooter() {
        printWriter.println("  ELSE maximum_quantity END");
        printWriter.println(";");
    }

    private static void updateSqlMobArrowMinEntry(int[] entry) {
        printWriter.println("                       WHEN dropperid = " + entry[0] + " AND itemid = " + entry[1] + " THEN " + entry[2]);
    }

    private static void updateSqlMobArrowMaxEntry(int[] entry) {
        printWriter.println("                       WHEN dropperid = " + entry[0] + " AND itemid = " + entry[1] + " THEN " + entry[3]);
    }

    private static List<int[]> getArrowEntryValues(Dictionary<int, List<int>> existingEntries) {
        List<int[]> entryValues = new (200);

        List<Entry<int, List<int>>> listEntries = new (existingEntries);

        listEntries.sort((o1, o2) -> {
            int val1 = o1.Key;
            int val2 = o2.Key;
            return int.compare(val1, val2);
        });

        foreach(Entry<int, List<int>> ee in listEntries) {
            int mobid = ee.Key;
            Pair<int, int> mr = mobRange.get(mobid);

            foreach(int itemid in ee.getValue()) {
                int itemWeight = (itemid % 10) + 1;

                int[] values = new int[4];
                values[0] = mobid;
                values[1] = itemid;

                values[2] = (int) Math.Ceiling(mr.getLeft() / itemWeight);   // weighted min quantity
                values[3] = (int) Math.Ceiling(mr.getRight() / itemWeight);   // weighted max quantity

                entryValues.Add(values);
            }
        }

        return entryValues;
    }

    private static void updateMobsArrowRange() {
        System.out.print("Generating updated ranges... ");
        Connection con = SimpleDatabaseConnection.getConnection();

        Dictionary<int, List<int>> existingEntries = new (200);

        try {
            // select all arrow drop entries on the DB, to update their values
            PreparedStatement ps = con.prepareStatement("SELECT dropperid, itemid FROM drop_data WHERE itemid >= " + MIN_ARROW_ID + " AND itemid <= " + MAX_ARROW_ID + " ORDER BY itemid;");
            ResultSet rs = ps.executeQuery();

            if (rs.isBeforeFirst()) {
                while (rs.next()) {
                    int mobid = rs.getInt(1);
                    int itemid = rs.getInt(2);

                    if (mobRange.ContainsKey(mobid)) {
                        List<int> em = existingEntries.get(mobid);

                        if (em == null) {
                            em = new (2);
                            existingEntries.Add(mobid, em);
                        }

                        em.Add(itemid);
                    }
                }

                if (existingEntries.Count > 0) {
                    List<int[]> entryValues = getArrowEntryValues(existingEntries);

                    printWriter = new PrintWriter(Files.newOutputStream(ToolConstants.getOutputFile(OUTPUT_FILE_NAME)));
                    printSqlHeader();

                    foreach(int[] arrowEntry in entryValues) {
                        updateSqlMobArrowMinEntry(arrowEntry);
                    }

                    printSqlMiddle();

                    foreach(int[] arrowEntry in entryValues) {
                        updateSqlMobArrowMaxEntry(arrowEntry);
                    }

                    printSqlFooter();

                    printWriter.close();
                } else {
                    throw new Exception("NO DATA");
                }

            } else {
                throw new Exception("NO DATA");
            }

            rs.close();
            ps.close();
            con.close();

            Console.WriteLine("done!");

        } catch (Exception e) {
            if (e.getMessage() != null && e.getMessage().Equals("NO DATA")) {
                Console.WriteLine("failed! The DB has no arrow entry to be updated.");
            } else {
                Log.Logger.Error(e.ToString());
            }
        }
    }

    public static void main(string[] args) {
        Instant instantStarted = Instant.now();
        // load mob stats from WZ
        mobStats = MonsterStatFetcher.getAllMonsterStats();

        calcAllMobsArrowRange();
        updateMobsArrowRange();
        Instant instantStopped = Instant.now();
        Duration durationBetween = Duration.between(instantStarted, instantStopped);
        Console.WriteLine("Get elapsed time in milliseconds: " + durationBetween.toMillis());
        Console.WriteLine("Get elapsed time in seconds: " + durationBetween.toSeconds());
    }
}
