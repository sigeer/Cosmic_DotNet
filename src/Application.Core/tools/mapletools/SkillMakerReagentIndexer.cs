

using provider.wz;
using tools;

namespace tools.mapletools;










/**
 * @author RonanLana
 * <p>
 * The main objective of this program is to index relevant reagent data
 * from the Item.wz folder and generate a SQL table with them, to be used
 * by the server source.
 */
public class SkillMakerReagentIndexer {
    private static Path INPUT_FILE = WZFiles.ITEM.getFile().resolve("Etc/0425.img.xml");
    private static Path OUTPUT_FILE = ToolConstants.getOutputFile("maker-reagent-data.sql");
    private static int INITIAL_STRING_LENGTH = 50;
    private static List<Pair<int, Pair<string, int>>> reagentList = new ();

    private static PrintWriter printWriter = null;
    private static BufferedReader bufferedReader = null;
    private static byte status = 0;
    private static int id = -1;

    private static string getName(string token) {
        int i, j;
        char[] dest;
        string d;

        i = token.lastIndexOf("name");
        i = token.indexOf("\"", i) + 1; //lower bound of the string
        j = token.indexOf("\"", i);     //upper bound

        dest = new char[INITIAL_STRING_LENGTH];
        token.getChars(i, j, dest, 0);

        d = new string(dest);
        return (d.trim());
    }

    private static string getValue(string token) {
        int i, j;
        char[] dest;
        string d;

        i = token.lastIndexOf("value");
        i = token.indexOf("\"", i) + 1; //lower bound of the string
        j = token.indexOf("\"", i);     //upper bound

        dest = new char[INITIAL_STRING_LENGTH];
        token.getChars(i, j, dest, 0);

        d = new string(dest);
        return (d.trim());
    }

    private static void simpleToken(string token) {
        if (token.Contains("/imgdir")) {
            status -= 1;
        } else if (token.Contains("imgdir")) {
            status += 1;
        }
    }

    private static void forwardCursor(int st) {
        string line = null;

        try {
            while (status >= st && (line = bufferedReader.readLine()) != null) {
                simpleToken(line);
            }
        } catch (Exception e) {
            Log.Logger.Error(e.ToString());
        }
    }

    private static void translateToken(string token) {
        string d;

        if (token.Contains("/imgdir")) {
            status -= 1;
        } else if (token.Contains("imgdir")) {
            if (status == 1) {           //getting id
                d = getName(token);
                id = int.Parse(d);
                Console.WriteLine("Parsing maker reagent id " + id);
            } else if (status == 2) {
                d = getName(token);
                if (!d.Equals("info")) {
                    Console.WriteLine("not info");
                    forwardCursor(status);
                }
            }

            status += 1;
        } else {
            if (status == 3) {
                if (token.Contains("int")) {
                    d = getName(token);

                    if (d.Contains("inc") || d.Contains("rand")) {
                        int v = getValue(token);
                        Pair<string, int> reagBuff = new (d, v);

                        Pair<int, Pair<string, int>> reagItem = new (id, reagBuff);
                        reagentList.Add(reagItem);
                    }
                } else {
                    if (token.Contains("canvas")) {
                        forwardCursor(status + 1);
                    }
                }
            }
        }
    }

    private static void SortReagentList() {
        reagentList.sort((p1, p2) -> p1.getLeft().compareTo(p2.getLeft()));
    }

    private static void WriteMakerReagentTableFile() {
        printWriter.println(" # SQL File autogenerated from the MapleSkillMakerReagentIndexer feature by Ronan Lana.");
        printWriter.println(" # Generated data is conformant with the Item.wz folder used to compile this.");
        printWriter.println();

        printWriter.println("CREATE TABLE IF NOT EXISTS `makerreagentdata` (");
        printWriter.println("  `itemid` int(11) NOT NULL,");
        printWriter.println("  `stat` varchar(20) NOT NULL,");
        printWriter.println("  `value` smallint(6) NOT NULL,");
        printWriter.println("  PRIMARY KEY (`itemid`)");
        printWriter.println(");");
        printWriter.println();

        StringBuilder sb = new StringBuilder("INSERT IGNORE INTO `makerreagentdata` (`itemid`, `stat`, `value`) VALUES\r\n");

        foreach(Pair<int, Pair<string, int>> it in reagentList) {
            sb.Append("  (" + it.left + ", \"" + it.right.left + "\", " + it.right.right + "),\r\n");
        }

        sb.setLength(sb.Length - 3);
        sb.Append(";");

        printWriter.println(sb);
    }

	private static void writeMakerReagentTableData() {
        // This will reference one line at a time
        string line = null;

        try (PrintWriter pw = new PrintWriter(Files.newOutputStream(OUTPUT_FILE));
                BufferedReader br = Files.newBufferedReader(INPUT_FILE);) {
            bufferedReader = br;

            while ((line = bufferedReader.readLine()) != null) {
                translateToken(line);
            }

            SortReagentList();

            printWriter = pw;
            WriteMakerReagentTableFile();
        } catch (FileNotFoundException ex) {
            Console.WriteLine("Unable to open file '" + OUTPUT_FILE + "'");
        } catch (IOException ex) {
            Console.WriteLine("Error reading file '" + OUTPUT_FILE + "'");
        } catch (Exception e) {
            Log.Logger.Error(e.ToString());
        }
    }

    public static void main(string[] args) {
        writeMakerReagentTableData();
    }
}
