

using provider.wz;

namespace tools.mapletools;













/**
 * @author RonanLana
 * <p>
 * This application parses the Mob.wz file inputted and generates a report showing
 * all cases where a mob has a boss HP bar and doesn't have a "boss" label.
 * <p>
 * Running it should generate a report file under "lib" folder with the search results.
 */
public class BossHpBarFetcher {
    private static string OUTPUT_FILE_NAME = "boss_hp_bar_report.txt";
    private static int INITIAL_STRING_LENGTH = 50;
    private static List<int> missingBosses = new ();

    private static BufferedReader bufferedReader = null;
    private static byte status = 0;
    private static int curBoss;
    private static int curHpTag;
    private static int curMobId;

    private static string getName(string token) {
        int i, j;
        char[] dest;
        string d;

        i = token.lastIndexOf("name");
        i = token.indexOf("\"", i) + 1; //lower bound of the string
        j = token.indexOf("\"", i);     //upper bound

        dest = new char[INITIAL_STRING_LENGTH];
        token.getChars(i, j, dest, 0);

        d = new string(dest);
        return (d.trim());
    }

    private static string getValue(string token) {
        int i, j;
        char[] dest;
        string d;

        i = token.lastIndexOf("value");
        i = token.indexOf("\"", i) + 1; //lower bound of the string
        j = token.indexOf("\"", i);     //upper bound

        dest = new char[INITIAL_STRING_LENGTH];
        token.getChars(i, j, dest, 0);

        d = new string(dest);
        return (d.trim());
    }

    private static void forwardCursor(int st) {
        string line = null;

        try {
            while (status >= st && (line = bufferedReader.readLine()) != null) {
                simpleToken(line);
            }
        } catch (Exception e) {
            Log.Logger.Error(e.ToString());
        }
    }

    private static void simpleToken(string token) {
        if (token.Contains("/imgdir")) {
            status -= 1;
        } else if (token.Contains("imgdir")) {
            status += 1;
        }
    }

    private static void readMobLabel(string token) {
        string name = getName(token);
        string value = getValue(token);

        switch (name) {
            case "boss" -> curBoss = int.Parse(value);
            case "hpTagColor" -> curHpTag = int.Parse(value);
        }
    }

    private static void processMobData() {
        if (curHpTag != int.MaxValue && curBoss == int.MaxValue) {
            missingBosses.Add(curMobId);
        }
    }

    private static void translateToken(string token) {
        string d;

        if (token.Contains("/imgdir")) {
            status -= 1;

            if (status == 1) {
                processMobData();
            }
        } else if (token.Contains("imgdir")) {
            if (status == 0) {
                string mobText = getName(token);
                curMobId = int.Parse(mobText.Substring(0, mobText.lastIndexOf('.')));
            } else if (status == 1) {           //getting info
                d = getName(token);

                if (!d.contentEquals("info")) {
                    forwardCursor(status);
                } else {
                    curBoss = int.MaxValue;
                    curHpTag = int.MaxValue;
                }
            } else if (status == 2) {
                forwardCursor(status);
            }

            status += 1;
        } else {
            if (status == 2) {      //info tags
                readMobLabel(token);
            }
        }
    }

    private static void readBossHpBarData() throws IOException {
        Path mobDirectory = WZFiles.MOB.getFile();
        try (DirectoryStream<Path> stream = Files.newDirectoryStream(mobDirectory)) {
            foreach(Path path in stream) {
                if (Files.isRegularFile(path)) {
                    try (BufferedReader br = Files.newBufferedReader(path)) {
                        bufferedReader = br;
                        string line;
                        while ((line = bufferedReader.readLine()) != null) {
                            translateToken(line);
                        }
                    }
                }
            }
        }
    }

    private static void printReportFileHeader(PrintWriter writer) {
        writer.println(" # Report File autogenerated from the MapleBossHpBarFetcher feature by Ronan Lana.");
        writer.println(" # Generated data takes into account several data info from the server-side WZ.xmls.");
        writer.println();
    }

    private static void printReportFileResults(PrintWriter writer) {
        foreach(int mobId in missingBosses) {
            writer.println("Missing 'isBoss' on id: " + mobId);
        }
    }

    private static void reportBossHpBarData() {
        // This will reference one line at a time

        try (PrintWriter printWriter = new PrintWriter(Files.newOutputStream(ToolConstants.getOutputFile(OUTPUT_FILE_NAME)))) {
            Console.WriteLine("Reading WZs...");
            readBossHpBarData();

            Console.WriteLine("Reporting results...");

            printReportFileHeader(printWriter);
            printReportFileResults(printWriter);

            Console.WriteLine("Done!");
        } catch (FileNotFoundException ex) {
            Console.WriteLine("Unable to open mob file.");
        } catch (IOException ex) {
            Console.WriteLine("Error reading mob file.");
        } catch (Exception e) {
            Log.Logger.Error(e.ToString());
        }
    }

    public static void main(string[] args) {
    	Instant instantStarted = Instant.now();
        reportBossHpBarData();
        Instant instantStopped = Instant.now();
        Duration durationBetween = Duration.between(instantStarted, instantStopped);
        Console.WriteLine("Get elapsed time in milliseconds: " + durationBetween.toMillis());
        Console.WriteLine("Get elapsed time in seconds: " + durationBetween.toSeconds());
    }

}
